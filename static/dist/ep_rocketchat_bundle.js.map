{"version":3,"file":"ep_rocketchat_bundle.js","sources":["../js/handleRocketChatNotifications/methods/helper/notificationHelper.js","../js/utiles.js","../js/handleClientMessageMethod/updateRocketChatIframe.js","../js/handleClientMessageMethod/updateRocketChatIframeOnlineUsers.js","../js/handleClientMessageMethod/gatherUpHeaderIds.js","../js/handleRocketChatNotifications/methods/helper/newMentionHelper.js","../js/handleClientMessageMethod/updateRocketChatAnonymousInterface.js","../js/handleRocketChatNotifications/methods/pushMethod.js","../js/handleRocketChatNotifications/handleRocketChatNotifications.js","../js/handleRocketChatNotifications/methods/notificationsMethod.js","../js/handleRocketChatNotifications/methods/newMessageMethod.js","../js/handleRocketChatNotifications/methods/unreadChangedBySubscription.js","../js/handleRocketChatNotifications/methods/chatLoading.js","../js/aceInitialized.js","../js/handleClientMessage.js","../js/handleClientMessageMethod/updateChannelsMessageCount.js"],"sourcesContent":["export const setHistoryCount = (headerId, historyCount) => {\n  localStorage.setItem(`${headerId}_historyCount`, historyCount);\n};\n\nexport const getHistoryCount = (headerId) => localStorage.getItem(`${headerId}_historyCount`);\n\nexport const getLastActiveHeader = () => localStorage.getItem('lastActiveHeader');\n\nexport const setUserUnreadMentionedCount = (headerId, userId, unreadMentionedCount) => {\n  localStorage.setItem(`${headerId}_unreadMentionedCount_${userId}`, unreadMentionedCount);\n};\n\nexport const getUserUnreadMentionedCount = (headerId, userId) => {\n  localStorage.getItem(`${headerId}_unreadMentionedCount_${userId}`);\n};\n\nexport const setNewMessageCount = (headerId, lastNewMessageCount) => {\n  localStorage.setItem(`${headerId}_newMessage`, lastNewMessageCount);\n};\n\nexport const getNewMessageCount = (headerId) => localStorage.getItem(`${headerId}_newMessage`);\n\nexport const setUnreadCount = (headerId, unreadCount) => {\n  localStorage.setItem(`${headerId}_unreadCount`, unreadCount);\n};\n\nexport const getUnreadCount = (headerId) => localStorage.getItem(`${headerId}_unreadCount`);\n\nexport const setLastActiveHeader = (headerId) => {\n  localStorage.setItem('lastActiveHeader', headerId);\n};\n","export const $bodyAceOuter = () => $(document).find('iframe[name=\"ace_outer\"]').contents();\n","import {\n  setUnreadCount,\n  setNewMessageCount,\n  setUserUnreadMentionedCount,\n  setHistoryCount,\n  setLastActiveHeader,\n} from '../handleRocketChatNotifications/methods/helper/notificationHelper';\nimport {$bodyAceOuter} from '../utiles';\n\n\nexport default (payLoad) => {\n  try {\n    document.getElementById('ep_rocketchat_iframe').contentWindow.postMessage(\n        {externalCommand: 'go', path: `/channel/${payLoad.data.room}?layout=embedded`}, '*');\n    setTimeout(() => {\n      $('#chat-loading').animate({\n        opacity: 0,\n      }, {\n        duration: 500,\n        complete: () => {\n          $('#chat-loading').css({display: 'none'});\n          $('#ep_rocketchat_iframe').animate({opacity: 1}, 500);\n\n          const isMobile = clientVars.userAgent.isMobile;\n          let room = payLoad.data.room;\n          const padId = payLoad.padId;\n          const userId = payLoad.userId;\n          room = (room === `${padId}-general-channel`) ? 'general' : room;\n\n          setUnreadCount(room, 0);\n          setNewMessageCount(room, 0);\n          setUserUnreadMentionedCount(room, userId, 0);\n          setHistoryCount(room, 0);\n          setLastActiveHeader(room);\n          $(`#${room}_notification`).empty();\n\n          const headerId = $(`#${room}_notification`).attr('data-headerid');\n          let $el = $bodyAceOuter().find('iframe')\n              .contents()\n              .find('#innerdocbody')\n              .find(`[headerid=\"${headerId}\"]`)[0];\n          if ($el) {\n            $el = $el.shadowRoot;\n            if (!isMobile) {\n              $el.querySelector('.bubbleNotify').style.display = 'none';\n              $el.querySelector('.mobileIcon').style.display = 'block';\n              $el.querySelector('.mobileIcon').style.marginTop = '5px';\n            }\n\n            $el.querySelectorAll('.counter').forEach((el) => {\n              el.innerText = '';\n            });\n          }\n        },\n      });\n    }, 500);\n  } catch (e) {\n    console.log(e);\n  }\n};\n","export default (payLoad) => {\n  $('#ep_rocketchat_onlineUsersList').empty();\n  if (!payLoad.data.onlineUsers) return;\n  if (!payLoad.data.onlineUsers.online) return;\n  let elements = '';\n  payLoad.data.onlineUsers.online.forEach(({username}) => {\n    console.info('element', username);\n\n    const {padId, serverTimestamp: time} = clientVars;\n    const userProfileImageURL = `/static/getUserProfileImage/${username}/${padId}?t=${time}`;\n    elements += `\n            <div data-userId=\"${username}\" class=\"avatar\">\n                <div\n                  class=\"ep_rocketchat_onlineUsersList_avatarImg\"\n                  style=\"\n                    background: url(${userProfileImageURL}) no-repeat 50% 50% ;\n                    background-size: 28px;\n                    background-color: #fff;\n                  \">\n                  </div>\n            </div>`;\n  });\n\n  if (elements) { $('#ep_rocketchat_onlineUsersList').append(elements); }\n};\n","/*\nforwardTo : {\n    ep_rocketchat_joinToAllChannels,\n    ep_rocketchat_getHistoryNotification\n}\n**/\n// TODO: need enhancement\nexport default (payLoad) => {\n  try {\n    const headerIds = [];\n    const delims = ['h1', 'h2', 'h3', 'h4'];\n    const hs = $('iframe[name=\"ace_outer\"]').contents()\n        .find('iframe').contents().find('#innerdocbody').children('div').children(delims);\n\n    $(hs).each(function () {\n      const $parent = $(this).closest('.ace-line');\n      const headerId = $(this).data('data-id') || $parent.attr('sectionid');\n      headerIds.push(headerId.toLowerCase());\n    });\n    headerIds.push(`${payLoad.padId}-general-channel`);\n    const message = {\n      type: 'ep_rocketchat',\n      action: payLoad.data.forwardTo,\n      userId: payLoad.userId,\n      padId: payLoad.padId,\n      data: {\n        headerIds,\n      },\n    };\n    pad.collabClient.sendMessage(message);\n  } catch (e) {\n    console.log(e);\n  }\n};\n","const __extraHeightOfContainer = 317; // 132px shadow bottom conatiner + 185 px padding bottom1\n\nconst checkInView = (elem) => {\n  const container = $('#toc');\n  const docViewTop = container.scrollTop();\n  const docViewBottom = docViewTop + (container.height() - __extraHeightOfContainer);\n\n  const elemTop = $(elem).offset().top;\n  const elemBottom = elemTop + $(elem).height();\n  return {visible: ((elemBottom <= docViewBottom))}; // && (elemTop >= docViewTop)\n};\n\nconst checkLastElement = (containerId) => {\n  let targetElement;\n  if (typeof containerId !== String) targetElement = $(containerId);\n  else targetElement = $(`#${containerId}`).nextAll('[mentioned=true]').last();\n\n  if (targetElement.length) {\n    const elementStatus = checkInView(targetElement);\n    return !elementStatus.visible;\n  }\n  return false;\n};\n\n\nexport const newMentionHelper = (headerId) => {\n  const rowContainer = $(`#${headerId}_container`);\n  rowContainer.attr('mentioned', 'true');\n  if (rowContainer.length && headerId !== 'general') {\n    const elementStatus = checkInView(rowContainer, true);\n    if (elementStatus.visible === false) {\n      $('#bottomNewMention').css({display: 'block'});\n    }\n  }\n};\n\nexport const removeNewMentionHelper = (headerId) => {\n  const rowContainer = $(`#${headerId}_container`);\n  if (rowContainer.length && headerId !== 'general') rowContainer.attr('mentioned', 'false');\n};\n\nexport const handleNewMentionButton = () => {\n  const handleScroll = () => {\n    const lastScrolledMention = $('#tocItems').find('[mentioned=true]').last();\n    if (lastScrolledMention) {\n      if (checkLastElement(lastScrolledMention) === true) {\n        $('#bottomNewMention').css({display: 'block'});\n      } else {\n        $('#bottomNewMention').css({display: 'none'});\n      }\n    }\n  };\n\n  const debounce = (method, delay) => {\n    clearTimeout(method._tId);\n    method._tId = setTimeout(() => {\n      method();\n    }, delay);\n  };\n\n  $('#toc').scroll(() => {\n    debounce(handleScroll, 100);\n  });\n\n  $('#bottomNewMention').click(() => {\n    const lastScrolledMention = $('#bottomNewMention').attr('_lastscrolled');\n    if (lastScrolledMention) {\n      const lastScrolledElement = $(`#${lastScrolledMention}`);\n      const targetElement = lastScrolledElement.nextAll('[mentioned=true]').first();\n      if (targetElement.length) {\n        $('#bottomNewMention').attr('_lastscrolled', targetElement.attr('id'));\n        $(targetElement)[0].scrollIntoView({\n          behavior: 'smooth',\n        });\n      } else {\n        $(lastScrolledElement)[0].scrollIntoView({\n          behavior: 'smooth',\n        });\n      }\n    } else {\n      const mentionedItems = $('#tocItems').find('[mentioned=true]');\n      mentionedItems.each(function (i) {\n        const elementStatus = checkInView(this);\n        if (elementStatus.visible === false) {\n          $(this)[0].scrollIntoView({\n            behavior: 'smooth',\n          });\n\n          $('#bottomNewMention').attr('_lastscrolled', this.id);\n          if (i === (mentionedItems.length - 1)) {\n            $('#bottomNewMention').css({display: 'none'});\n          }\n          return false;\n        }\n      });\n    }\n  });\n};\n","const __LOGOUT = '1';\n\nexport default () => {\n  document.getElementById('ep_rocketchat_iframe').contentWindow.postMessage({\n    externalCommand: 'userEtherpadStatus',\n    status: clientVars.ep_profile_modal.userStatus === __LOGOUT ? 'loginNeeded' : 'LoggedIn',\n  }, '*');\n};\n","export default (data) => {\n  const event = new CustomEvent('ep_push_notification',\n      {detail: {eventName: 'notifyMe', data}});\n    // Dispatch/Trigger/Fire the event\n  window.dispatchEvent(event);\n};\n","import notificationsMethod from './methods/notificationsMethod';\nimport unreadChangedBySubscription from './methods/unreadChangedBySubscription';\nimport newMessageMethod from './methods/newMessageMethod';\nimport chatLoading from './methods/chatLoading';\n\nconst bindEvent = (element, eventName, eventHandler) => {\n  if (element.addEventListener) {\n    element.addEventListener(eventName, eventHandler, false);\n  } else if (element.attachEvent) {\n    element.attachEvent(`on${eventName}`, eventHandler);\n  }\n};\n\nexport default () => {\n  bindEvent(window, 'message', (e) => {\n    const eventName = e.data.eventName;\n    const data = e.data.data;\n    if (eventName === 'notification') {\n      notificationsMethod(data);\n    }\n    if (eventName === 'new-message') {\n      newMessageMethod(data);\n    }\n    if (eventName === 'unread-changed-by-subscription') {\n      unreadChangedBySubscription(data);\n    }\n    if (eventName === 'chatLoading') {\n      chatLoading();\n    }\n  });\n};\n","import {newMentionHelper as newMention, removeNewMentionHelper} from './helper/newMentionHelper';\nimport {\n  getLastActiveHeader,\n  getUserUnreadMentionedCount,\n  setUserUnreadMentionedCount,\n  getHistoryCount,\n  getUnreadCount,\n  setUnreadCount,\n} from './helper/notificationHelper';\nimport pushMethod from './pushMethod';\nimport {$bodyAceOuter} from '../../utiles';\n\nexport default (data) => {\n  if (!data.fromOpenedRoom) { // must be false in order to notify user\n    const padId = pad.getPadId();\n    const userId = pad.getUserId();\n    const isMobile = clientVars.userAgent.isMobile;\n    const {name, fname, message} = data.notification.payload;\n\n\n    const headerId = (name === `${padId}-general-channel`) ? 'general' : name;\n    const lastActiveHeader = getLastActiveHeader() || false;\n\n    if (lastActiveHeader?.toLowerCase() === headerId) return;\n\n    let notificationElement = $(`#${headerId}_notification`);\n    if (!notificationElement.length) notificationElement = $(`#${fname}_notification`);\n    if (!notificationElement.length) notificationElement = $(`#${(fname) ? fname.toLowerCase() : ''}_notification`);\n    if (!notificationElement.length) return;\n\n    const realHeaderId = notificationElement.attr('data-headerid');\n\n    // check mentioned this user\n    let unreadNotificationTemplate;\n    let unreadMentionedCount = getUserUnreadMentionedCount(headerId, userId) || 0;\n    unreadMentionedCount = parseInt(unreadMentionedCount);\n\n    // it means mentioned by someone or generally\n    if ([`@${userId}`, '@all'].includes(message.msg)) {\n      unreadMentionedCount++;\n      setUserUnreadMentionedCount(headerId, userId, unreadMentionedCount);\n      unreadNotificationTemplate = $('#ep_rocketchat_mentionNotification')\n          .tmpl({unread: unreadMentionedCount});\n\n      $('body > header .shortMenue .btnChat .messageCount').text(unreadMentionedCount);\n      notificationElement.html(unreadNotificationTemplate);\n      pushMethod({title: 'New message', body: 'You have new message.'});\n      // because of Rocketchat make to lower case need to access\n      // real header id via notificationElement.attr(\"data-headerid\")\n      newMention(realHeaderId);\n    } else {\n      const historyCount = parseInt(getHistoryCount(headerId)) || 0;\n      let unReadCount = 0;\n\n      if (historyCount > 0) {\n        unReadCount = historyCount;\n      } else {\n        let lastUnreadCount = parseInt(getUnreadCount(headerId) || 0);\n        lastUnreadCount++;\n        setUnreadCount(headerId, lastUnreadCount);\n        unReadCount = lastUnreadCount;\n      }\n\n      unreadNotificationTemplate = $('#ep_rocketchat_unreadNotification')\n          .tmpl({unread: unReadCount + unreadMentionedCount});\n\n      notificationElement.html(unreadNotificationTemplate);\n      removeNewMentionHelper(realHeaderId);\n      let unreadCount = unReadCount + unreadMentionedCount;\n      let $el = $bodyAceOuter().find('iframe')\n          .contents()\n          .find('#innerdocbody')\n          .find(`[headerid=\"${realHeaderId}\"]`)[0];\n\n      if ($el) {\n        $el = $el.shadowRoot;\n        // change the inline icon when notification counter is 0\n        if (!isMobile) {\n          if (unreadCount === 0) {\n            $el.querySelector('.bubbleNotify').style.display = 'none';\n            $el.querySelector('.mobileIcon').style.display = 'block';\n            $el.querySelector('.mobileIcon').style.marginTop = '5px';\n          } else if (unreadCount > 0) {\n            $el.querySelector('.bubbleNotify').style.display = 'block';\n            $el.querySelector('.mobileIcon').style.display = 'none';\n            $el.querySelector('.mobileIcon').style.marginTop = '0';\n          }\n        }\n\n        if (unreadCount > 9) {\n          unreadCount = '9+';\n          if (isMobile) {\n            $el.querySelectorAll('.counter').forEach((el) => {\n              el.style.marginLeft = '-7px';\n            });\n          }\n        }\n        $el.querySelectorAll('.counter').forEach((el) => {\n          el.innerText = unreadCount;\n        });\n      }\n    }\n  }\n};\n","import {newMentionHelper as newMention, removeNewMentionHelper} from './helper/newMentionHelper';\nimport {\n  getLastActiveHeader,\n  getUserUnreadMentionedCount,\n  setUserUnreadMentionedCount,\n  getHistoryCount,\n  getNewMessageCount,\n  setNewMessageCount,\n} from './helper/notificationHelper';\nimport pushMethod from './pushMethod';\nimport {$bodyAceOuter} from '../../utiles';\n\n\nexport default (data) => {\n  const padId = pad.getPadId();\n  const roomId = data.name;\n  const userId = pad.getUserId();\n  const headerId = (roomId === `${padId}-general-channel`) ? 'general' : roomId;\n  const isMobile = clientVars.userAgent.isMobile;\n\n  const lastActiveHeader = getLastActiveHeader() || false;\n\n  if (lastActiveHeader?.toLowerCase() === headerId) return;\n\n\n  // check mentioned this user\n  let unreadMentionedCount = getUserUnreadMentionedCount(headerId, userId) || 0;\n  unreadMentionedCount = parseInt(unreadMentionedCount);\n\n  const notificationElement = $(`#${headerId}_notification`);\n  const realHeaderId = notificationElement.attr('data-headerid');\n  let unreadNotificationTemplate;\n\n  unreadMentionedCount = parseInt(unreadMentionedCount);\n  if ([`@${userId}`, '@all'].includes(data.msg)) {\n    unreadMentionedCount++;\n    setUserUnreadMentionedCount(headerId, userId, unreadMentionedCount);\n    unreadNotificationTemplate = $('#ep_rocketchat_mentionNotification')\n        .tmpl({unread: unreadMentionedCount});\n\n    $('body > header .shortMenue .btnChat .messageCount').text(unreadMentionedCount);\n    notificationElement.html(unreadNotificationTemplate);\n    pushMethod({title: 'New message', body: 'You have new message.'});\n\n    // because of Rocketchat make to lower case need to access real\n    // header id via notificationElement.attr(\"data-headerid\")\n    newMention(realHeaderId);\n  } else {\n    const historyCount = parseInt(getHistoryCount(headerId)) || 0;\n    let unReadCount = 0;\n    if (historyCount > 0) {\n      unReadCount = historyCount;\n    } else {\n      let lastNewMessageCount = parseInt(getNewMessageCount(headerId)) || 0;\n      lastNewMessageCount++;\n      setNewMessageCount(headerId, lastNewMessageCount);\n      unReadCount = lastNewMessageCount;\n    }\n    unreadNotificationTemplate = $('#ep_rocketchat_unreadNotification').tmpl({unread: unReadCount});\n    notificationElement.html(unreadNotificationTemplate);\n    removeNewMentionHelper(realHeaderId);\n\n    let unreadCount = unReadCount;\n    let $el = $bodyAceOuter().find('iframe')\n        .contents()\n        .find('#innerdocbody')\n        .find(`[headerid=\"${realHeaderId}\"]`)[0];\n\n    if ($el) {\n      $el = $el.shadowRoot;\n      // change the inline icon when notification counter is 0\n      if (!isMobile) {\n        if (unreadCount === 0) {\n          $el.querySelector('.bubbleNotify').style.display = 'none';\n          $el.querySelector('.mobileIcon').style.display = 'block';\n          $el.querySelector('.mobileIcon').style.marginTop = '5px';\n        } else if (unreadCount > 0) {\n          $el.querySelector('.bubbleNotify').style.display = 'block';\n          $el.querySelector('.mobileIcon').style.display = 'none';\n          $el.querySelector('.mobileIcon').style.marginTop = '0';\n        }\n      }\n\n      if (unreadCount > 9) {\n        unreadCount = '9+';\n        if (isMobile) {\n          $el.querySelectorAll('.counter').forEach((el) => {\n            el.style.marginLeft = '-7px';\n          });\n        }\n      }\n      $el.querySelectorAll('.counter').forEach((el) => {\n        el.innerText = unreadCount;\n      });\n    }\n  }\n};\n","import {newMentionHelper as newMention, removeNewMentionHelper} from './helper/newMentionHelper';\nimport {\n  getHistoryCount,\n  getLastActiveHeader,\n  getUnreadCount,\n  getNewMessageCount,\n  getUserUnreadMentionedCount,\n} from './helper/notificationHelper';\nimport {$bodyAceOuter} from '../../utiles';\n\n\nexport default ({name, alert, unread, fname}) => {\n  // if there is unseen history count must click on that header first\n  const padId = clientVars.padId;\n  const headerId = (name === `${padId}-general-channel`) ? 'general' : name;\n  const historyCount = parseInt(getHistoryCount(headerId)) || 0;\n  const isMobile = clientVars.userAgent.isMobile;\n\n  if (historyCount === 0 && alert === false && unread === 0) return;\n\n  const userId = pad.getUserId();\n  const lastActiveHeader = getLastActiveHeader() || false;\n\n  if (lastActiveHeader?.toLowerCase() === headerId) return;\n\n  let notificationElement = $(`#${headerId}_notification`);\n  if (!notificationElement.length) notificationElement = $(`#${fname}_notification`);\n  if (!notificationElement.length) {\n    notificationElement = $(`#${(fname) ? fname.toLowerCase() : ''}_notification`);\n  }\n\n  if (!notificationElement.length) return;\n\n  const realHeaderId = notificationElement.attr('data-headerid');\n  const notifUnreadCount = getUnreadCount(headerId);\n  const notifNewMsgCount = getNewMessageCount(headerId);\n  const lastUnreadCount = parseInt(notifUnreadCount) || parseInt(notifNewMsgCount) || false;\n\n  let unreadMentionedCount = getUserUnreadMentionedCount(headerId, userId) || 0;\n  unreadMentionedCount = parseInt(unreadMentionedCount);\n\n  let unreadNotificationTemplate;\n  if (unreadMentionedCount === 0) {\n    unreadNotificationTemplate = $('#ep_rocketchat_unreadNotification')\n        .tmpl({unread: historyCount || lastUnreadCount || unread});\n\n    removeNewMentionHelper(realHeaderId);\n    let unreadCount = historyCount || lastUnreadCount || unread;\n    let $el = $bodyAceOuter().find('iframe')\n        .contents()\n        .find('#innerdocbody')\n        .find(`[headerid=\"${realHeaderId}\"]`)[0];\n\n    if ($el) {\n      $el = $el.shadowRoot;\n      // change the inline icon when notification counter is 0\n      if (!isMobile) {\n        if (unreadCount === 0) {\n          $el.querySelector('.bubbleNotify').style.display = 'none';\n          $el.querySelector('.mobileIcon').style.display = 'block';\n          $el.querySelector('.mobileIcon').style.marginTop = '5px';\n        } else if (unreadCount > 0) {\n          $el.querySelector('.bubbleNotify').style.display = 'block';\n          $el.querySelector('.mobileIcon').style.display = 'none';\n          $el.querySelector('.mobileIcon').style.marginTop = '0';\n        }\n      }\n\n      if (unreadCount > 9) {\n        unreadCount = '9+';\n        if (isMobile) {\n          $el.querySelectorAll('.counter').forEach((el) => {\n            el.style.marginLeft = '-7px';\n          });\n        }\n      }\n      $el.querySelectorAll('.counter').forEach((el) => {\n        el.innerText = unreadCount;\n      });\n    }\n  } else {\n    unreadNotificationTemplate = $('#ep_rocketchat_mentionNotification')\n        .tmpl({unread: unreadMentionedCount});\n\n    $('body > header .shortMenue .btnChat .messageCount').text(unreadMentionedCount);\n\n    // because of Rocketchat make to lower case need to access\n    // real header id via notificationElement.attr(\"data-headerid\")\n    newMention(realHeaderId);\n  }\n  notificationElement.html(unreadNotificationTemplate);\n};\n","export default () => {\n  $('#ep_rocketchat_iframe').animate({\n    opacity: 0,\n  }, {\n    duration: 200,\n    complete: () => {\n      $('#chat-loading').css({opacity: 1});\n\n      $('#chat-loading').css({display: 'flex'});\n    },\n  });\n};\n","// import {padcookie} from 'ep_etherpad-lite/static/js/pad_cookie';\nimport {\n  handleClientMessage_CUSTOM as clientMessage_CUSTOM,\n  handleClientMessage_USER_NEWINFO as clientMessage_USER_NEWINFO,\n  handleClientMessage_USER_LEAVE as clientMessage_USER_LEAVE,\n} from './handleClientMessage';\nimport handleRocketChatNotifications from './handleRocketChatNotifications/handleRocketChatNotifications';\nimport {handleNewMentionButton} from './handleRocketChatNotifications/methods/helper/newMentionHelper';\n\nexport const aceInitialized = () => {\n  $('#chaticon').hide();\n  $('#options-stickychat').prop('checked', false);\n  // padcookie.setPref('chatAlwaysVisible', false);\n  $('#options-stickychat').parent().hide();\n  $('#options-chatandusers').parent().hide();\n\n  // $(\"#editorcontainer iframe\").addClass('fullHeightEditor')\n\n  handleRocketChatNotifications();\n  handleNewMentionButton();\n  return [];\n};\n\nexport const handleClientMessage_CUSTOM = clientMessage_CUSTOM;\nexport const handleClientMessage_USER_NEWINFO = clientMessage_USER_NEWINFO;\nexport const handleClientMessage_USER_LEAVE = clientMessage_USER_LEAVE;\n","import updateRocketChatIframe from './handleClientMessageMethod/updateRocketChatIframe';\nimport updateRocketChatIframeOnlineUsers from './handleClientMessageMethod/updateRocketChatIframeOnlineUsers';\nimport gatherUpHeaderIds from './handleClientMessageMethod/gatherUpHeaderIds';\nimport updateChannelsMessageCount from './handleClientMessageMethod/updateChannelsMessageCount';\nimport updateRocketChatAnonymousInterface from './handleClientMessageMethod/updateRocketChatAnonymousInterface';\n\nexport const handleClientMessage_CUSTOM = (_hook, context) => {\n  const currentUserId = pad.getUserId();\n  const {action, userId, padId, messageChatText} = context.payload;\n\n  if (action === 'updateRocketChatAnonymousInterface') {\n    if (currentUserId === userId) updateRocketChatAnonymousInterface(context.payload);\n  }\n\n  if (action === 'updateRocketChatIframe') {\n    if (currentUserId === userId) updateRocketChatIframe(context.payload);\n    updateRocketChatIframeOnlineUsers(context.payload);\n  }\n  if (action === 'updateChannelsMessageCount') {\n    if (currentUserId === userId) updateChannelsMessageCount(context.payload);\n  }\n\n\n  if (action === 'updateOnlineUsersList') {\n    // const lastActiveHeader = localStorage.getItem(\"lastActiveHeader\");\n    // if (lastActiveHeader === context.payload.data.room )\n    updateRocketChatIframeOnlineUsers(context.payload);\n  }\n\n  if (action === 'gatherUpHeaderIds') {\n    if (currentUserId === userId) gatherUpHeaderIds(context.payload);\n  }\n\n  // raised by ep_profile_modal\n  if (action === 'EP_PROFILE_USER_LOGIN_UPDATE') {\n    if (currentUserId === userId) {\n      const message = {\n        type: 'ep_rocketchat',\n        action: 'ep_rocketchat_updateRocketChatUser',\n        userId: currentUserId,\n        padId,\n        data: context.payload,\n      };\n      pad.collabClient.sendMessage(message);\n      updateRocketChatAnonymousInterface(context.payload);\n    }\n  }\n\n  // raised by ep_profile_modal\n  if (action === 'EP_PROFILE_USER_LOGOUT_UPDATE') {\n    if (currentUserId === userId) {\n      const message = {\n        type: 'ep_rocketchat',\n        action: 'ep_rocketchat_updateRocketChatUser',\n        userId: currentUserId,\n        padId,\n        data: {\n          userName: 'Anonymous',\n          avatarUrlReset: true,\n          messageChatText,\n        },\n      };\n      pad.collabClient.sendMessage(message);\n      updateRocketChatAnonymousInterface(context.payload);\n    }\n  }\n\n  // raised by ep_profile_modal\n  if (action === 'EP_PROFILE_USER_IMAGE_CHANGE') {\n    if (currentUserId === userId) {\n      const message = {\n        type: 'ep_rocketchat',\n        action: 'ep_rocketchat_updateImageRocketChatUser',\n        userId: currentUserId,\n        padId,\n      };\n      pad.collabClient.sendMessage(message);\n    }\n  }\n\n  if (context.payload.action === 'recieveTitleMessage') {\n    const message = context.payload.message;\n    const padTitle = message ? message : pad.getPadId();\n    if (padTitle) $('#parent_header_chat_room').text(padTitle);\n  }\n\n  return [];\n};\n\nexport const handleClientMessage_USER_NEWINFO = () => {\n  const currentUserId = pad.getUserId();\n  const lastActiveHeader = localStorage.getItem('lastActiveHeader');\n\n  const message = {\n    type: 'ep_rocketchat',\n    action: 'ep_rocketchat_updateOnlineUsersList',\n    userId: currentUserId,\n    padId: pad.getPadId(),\n    data: {\n      headerId: lastActiveHeader,\n    },\n  };\n  pad.collabClient.sendMessage(message);\n  return [];\n};\n\nexport const handleClientMessage_USER_LEAVE = () => {\n  const currentUserId = pad.getUserId();\n  const lastActiveHeader = localStorage.getItem('lastActiveHeader');\n\n  const message = {\n    type: 'ep_rocketchat',\n    action: 'ep_rocketchat_updateOnlineUsersList',\n    userId: currentUserId,\n    padId: pad.getPadId(),\n    data: {\n      headerId: lastActiveHeader,\n    },\n  };\n  pad.collabClient.sendMessage(message);\n  return [];\n};\n","import {removeNewMentionHelper} from '../handleRocketChatNotifications/methods/helper/newMentionHelper';\nimport {setHistoryCount} from '../handleRocketChatNotifications/methods/helper/notificationHelper';\nimport {$bodyAceOuter} from '../utiles';\n\nexport default (payLoad) => {\n  try {\n    const channelsMessageCounts = payLoad.data.channelsMessageCount;\n    const padId = payLoad.padId;\n    const isMobile = clientVars.userAgent.isMobile;\n\n\n    let lastActiveHeader = localStorage.getItem('lastActiveHeader');\n    lastActiveHeader = (lastActiveHeader) ? lastActiveHeader.toLowerCase() : lastActiveHeader;\n\n    channelsMessageCounts\n        .filter((v) => v.name !== lastActiveHeader && v.count > 0)\n        .forEach((element) => {\n          const headerId = (element.name === `${padId}-general-channel`) ? 'general' : element.name;\n          let notificationElement = $(`#${headerId}_notification`);\n          const realHeaderId = notificationElement.attr('data-headerid');\n          let unreadCount = element.count;\n\n          if (!notificationElement.length) {\n            notificationElement = $(`#${headerId.toLowerCase()}_notification`);\n          }\n          if (!notificationElement.length) {\n            notificationElement = $(`#${element.fname.toLowerCase()}_notification`);\n          }\n          if (!notificationElement.length) return;\n\n          const unreadNotificationTemplate = $('#ep_rocketchat_unreadNotification')\n              .tmpl({unread: unreadCount});\n\n          notificationElement.html(unreadNotificationTemplate);\n          removeNewMentionHelper(realHeaderId);\n          setHistoryCount(headerId, unreadCount);\n\n          let $el = $bodyAceOuter().find('iframe')\n              .contents()\n              .find('#innerdocbody')\n              .find(`[headerid=\"${realHeaderId}\"]`)[0];\n\n          if ($el) {\n            $el = $el.shadowRoot;\n            // change the inline icon when notification counter is 0\n            if (!isMobile) {\n              if (unreadCount === 0) {\n                $el.querySelector('.bubbleNotify').style.display = 'none';\n                $el.querySelector('.mobileIcon').style.display = 'block';\n                $el.querySelector('.mobileIcon').style.marginTop = '5px';\n              } else if (unreadCount > 0) {\n                $el.querySelector('.bubbleNotify').style.display = 'block';\n                $el.querySelector('.mobileIcon').style.display = 'none';\n                $el.querySelector('.mobileIcon').style.marginTop = '0';\n              }\n            }\n\n            if (unreadCount > 9) {\n              unreadCount = '9+';\n              if (isMobile) {\n                $el.querySelectorAll('.counter').forEach((el) => {\n                  el.style.marginLeft = '-7px';\n                });\n              }\n            }\n            $el.querySelectorAll('.counter').forEach((el) => {\n              el.innerText = unreadCount;\n            });\n          }\n        });\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["Object","defineProperty","exports","value","setHistoryCount","headerId","historyCount","localStorage","setItem","getHistoryCount","getItem","getLastActiveHeader","setUserUnreadMentionedCount","userId","unreadMentionedCount","getUserUnreadMentionedCount","setNewMessageCount","lastNewMessageCount","getNewMessageCount","setUnreadCount","unreadCount","getUnreadCount","$bodyAceOuter","$","document","find","contents","updateRocketChatIframe","payLoad","getElementById","contentWindow","postMessage","externalCommand","path","data","room","setTimeout","animate","opacity","duration","complete","css","display","isMobile","clientVars","userAgent","padId","setLastActiveHeader","empty","attr","$el","shadowRoot","querySelector","style","marginTop","querySelectorAll","forEach","el","innerText","e","console","log","updateRocketChatIframeOnlineUsers","onlineUsers","online","elements","username","info","serverTimestamp","time","append","gatherUpHeaderIds","headerIds","delims","hs","children","each","$parent","this","closest","push","toLowerCase","message","type","action","forwardTo","pad","collabClient","sendMessage","checkInView","elem","container","docViewBottom","scrollTop","height","visible","offset","top","newMentionHelper","rowContainer","length","removeNewMentionHelper","handleNewMentionButton","handleScroll","lastScrolledMention","last","containerId","targetElement","String","nextAll","checkLastElement","scroll","method","delay","clearTimeout","_tId","click","lastScrolledElement","first","scrollIntoView","behavior","mentionedItems","i","id","updateRocketChatAnonymousInterface","status","ep_profile_modal","userStatus","pushMethod","event","CustomEvent","detail","eventName","window","dispatchEvent","handleRocketChatNotifications","element","eventHandler","fromOpenedRoom","getPadId","getUserId","name","fname","notification","payload","notificationElement","realHeaderId","unreadNotificationTemplate","parseInt","includes","msg","tmpl","unread","text","html","title","body","newMention","unReadCount","lastUnreadCount","marginLeft","notificationsMethod","roomId","newMessageMethod","alert","notifUnreadCount","notifNewMsgCount","unreadChangedBySubscription","addEventListener","attachEvent","handleClientMessage_CUSTOM","_hook","context","currentUserId","messageChatText","channelsMessageCounts","channelsMessageCount","lastActiveHeader","filter","v","count","error","updateChannelsMessageCount","userName","avatarUrlReset","padTitle","handleClientMessage_USER_NEWINFO","handleClientMessage_USER_LEAVE","clientMessage_USER_LEAVE","hide","prop","parent"],"mappings":"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"}